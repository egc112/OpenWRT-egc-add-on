#!/bin/sh
#https://openwrt.org/docs/guide-user/base-system/hotplug

# Name: 97-custom-pbr-via-vpn
# Version: 26-apr-2024 by egc
# Description: OpenWRT hotplug script routing ipaddress/interface via the VPN
# Usage:simple PBR to route e.g. a guest interface or subnet or specific ipaddress via the VPN
# Installation: 
#  in this script below adapt the ipaddress/interface you want to route via the VPN
#  copy script to /etc/hotplug.d/iface
#  to stop default routing via the VPN, 
#    for WireGuard: disable "Route Allowed IPs" in the peer section or disable "Use default gateway" in Advanced section
#    for OpenVPN: in the openvpn config add:
#       pull-filter ignore "redirect-gateway"
#       redirect-private def1
#  reboot or restart network (service network restart)

# Set the name of the VPN interface you want to use between the quotes, make sure there are no space in the whole rule:
VPNINTERFACE="set-name-of-vpn-interface"

# Enable (remove #) and set the ip adressess of clients you want to use in CIDR format and/or 
#  the device you want to use as shown by ifconfig, e.g. br-lan or br-guest, set between the quotes
# Make sure there are no spaces in the rules
#IPADDR="192.168.30.0/24"
#MYINTERFACE="br-guest"


#DEBUG=; set -x; logger -t hotplug $(env); # uncomment/comment to enable/disable debug mode
TID=102		# routing table number
{

set_routes() {
	if [ "$INTERFACE" == "lan" ]; then
		sleep 10
		if [ "$ACTION" == "ifup" ]; then
			# Make table with default route via the VPN
			ip route add default dev "$VPNINTERFACE" table $TID
			# add local routes can be enabled if needed
			# ip route show | grep -Ev '^default |^0.0.0.0/1 |^128.0.0.0/1 ' | while read route; do
				# ip route add $route table $TID >/dev/null 2>&1
			# done
			# add rule
			[[ ! -z "$MYINTERFACE" ]] && { ip rule add iif "$MYINTERFACE" table $TID; echo "rule $MYINTERFACE added to table $TID"; }
			[[ ! -z "$IPADDR" ]] && { ip rule add from "$IPADDR" table $TID; echo "rule $IPADDR added to table $TID"; }
		fi
		# remove table and rules
		if [ "$ACTION" == "ifdown" ]; then
			while ip rule delete from 0/0 to 0/0 table $TID >/dev/null 2>&1; do true; done
			ip route flush table $TID
			echo "clean up"
		fi
	fi
}
set_routes
} 2>&1 | logger $([ ${DEBUG+x} ] && echo '-p user.debug') \
    -t $(echo $(basename $0) | grep -Eo '^.{0,23}')[$$] &
