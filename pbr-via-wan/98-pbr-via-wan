#!/bin/sh

# Name: 98-pbr-via-wan
# Version: 1.0.2 24-oct-2024 by egc
# Description: OpenWRT hoptlug script routing a specific sourceport, local IP address or interface etc. via the WAN
# Usage: e.g. When running a concurrent VPN client and VPN server or port forwarding via the WAN and needing to route the port via the WAN back and/or
#	when excluding some local IP addresses from using the VPN
# Installation:
#  Set the VPN client interface as MYINTERFACE, this interface will be used as trigger for this script
#  Remove the first # of the SPORT/IPADDR/ADDLOCALROUTES line to enable it, if desired
#  Adapt the port (e.g. your local VPN server port) and/or local IP addresses you want to route via the WAN
#  Copy script to /etc/hotplug.d/iface/
#  Reboot or restart network (service network restart)

MYINTERFACE="wg0"	# set the interface you are using for your VPN client interface, e.g. wg0 or tun0,
                    # for OpenVPN the tun interface has to be defined in the network config 
#SPORT=51820  # adapt the port number e.g 1194 for OpenVPN 51820 for WireGuard
#IPADDR="192.168.1.2/32 192.168.1.64/26"  # adapt list of IP address with CIDR notation, space delimited
ADDLOCALROUTES=  # uncomment/comment to enable/disable adding local routes to pbr table

#DEBUG=; set -x; logger -t hotplug $(env); # uncomment/comment to enable/disable debug mode
TID=100
{
get_gateway4() {
		GATEWAY4="$(ifstatus wan | grep nexthop | sed 's/[^0-9.]//g')"
		if [[ -z "$GATEWAY4" ]]; then
			GATEWAY4="$(uci get network.lan.gateway)"
		fi
}
get_gateway6() {
	GATEWAY6="$(ip -6 route | grep "default" | awk '{print $5;exit;}')"
	DEV6="$(ip -6 route | grep "default" | awk '{print $7;exit;}')"
}

valid_ipv4()
{
        local addrmask="$1"
		local addr="${addrmask%/*}"
		local mask="${addrmask#*/}"
        local N
        local OIFS
        case "${addr}" in
                *[!0-9.]* |  *..* | .* | *. ) #
                        return 1
                        ;;
        esac
        OIFS="${IFS}"
        IFS=.
        set -- $addr
        IFS="${OIFS}"
        if [ $# -ne 4 ]; then
                return 1
        fi
        for N in "$@"; do
                if [ "${#N}" -lt 1 -o "${#N}" -gt 3 ]; then
                        return 1
                fi
                if [ "$N" -gt 255 ]; then
                        return 1
                fi
        done
		[[ -n "$mask" ]] && [[ "$mask" -gt 32 || "$mask" -lt 0 ]] && return 1 || return 0
}

set_routes() {
	if [ "$INTERFACE" == "$MYINTERFACE" ]; then
		if [ "$ACTION" == "ifup" ]; then
			get_gateway4
			ip route add default via $GATEWAY4 table $TID
			echo "pbr: default route via $GATEWAY4 added to table $TID on ifup of $MYINTERFACE"
			if [[ ${ADDLOCALROUTES+x} ]]; then
				echo "pbr: adding local routes to table $TID"
				ip route show | grep -Ev '^default |^0.0.0.0/1 |^128.0.0.0/1 ' | while read route; do
					ip route add $route table $TID >/dev/null 2>&1
				done
			fi
			[[ -n $SPORT ]] && ip rule add sport $SPORT table $TID
			echo "pbr: rule $SPORT added to table $TID"
			if [[ -n "$IPADDR" ]]; then
				for ip in $IPADDR; do
					if valid_ipv4 "$ip"; then
						ip rule add from $ip table $TID
						echo "pbr: rule $ip added to table $TID"
					else
						echo "pbr: Could not add rule $ip to table $TID"
					fi
				done
			fi
		fi
		if [ "$ACTION" == "ifdown" ]; then
			while ip rule delete from 0/0 to 0/0 table $TID >/dev/null 2>&1; do true; done
			ip route flush table $TID
			echo "pbr: clean up on ifdown of $MYINTERFACE"
		fi
	fi
}
set_routes
} 2>&1 | logger $([ ${DEBUG+x} ] && echo '-p user.debug') \
    -t $(echo $(basename $0) | grep -Eo '^.{0,23}')[$$] &
